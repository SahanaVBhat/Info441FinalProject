{"ast":null,"code":"import _regeneratorRuntime from \"/Users/paola/go/src/Info441FinalProject/clients/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/Users/paola/go/src/Info441FinalProject/clients/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"/Users/paola/go/src/Info441FinalProject/clients/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/paola/go/src/Info441FinalProject/clients/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/paola/go/src/Info441FinalProject/clients/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/paola/go/src/Info441FinalProject/clients/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/paola/go/src/Info441FinalProject/clients/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/paola/go/src/Info441FinalProject/clients/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/paola/go/src/Info441FinalProject/clients/src/Components/Evaluations/CardList.js\";\nimport React, { Component } from \"react\";\nimport \"../../Styles/App.css\";\nimport api from '../../Constants/APIEndpoints/APIEndpoints';\nimport Card from './Card';\nimport Profile from '../Profile';\nimport Button from '@material-ui/core/Button';\nimport { withRouter } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\n\nvar CardList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CardList, _Component);\n\n  function CardList(props) {\n    var _this;\n\n    _classCallCheck(this, CardList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CardList).call(this, props));\n\n    _this.setError = function (error) {\n      _this.setState({\n        error: error\n      });\n    };\n\n    _this.handleEvalClick = function () {\n      _this.setState({\n        evals: []\n      }, function () {\n        _this.getEvals(_this.props.classInfo[0]);\n      });\n    };\n\n    _this.getEvals =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(courseID) {\n        var response, error, evals, evalsMap;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetch(api.base + api.handlers.courses + \"/\" + courseID + \"/evaluations\", {\n                  method: \"GET\"\n                });\n\n              case 2:\n                response = _context.sent;\n\n                if (!(response.status >= 300)) {\n                  _context.next = 9;\n                  break;\n                }\n\n                _context.next = 6;\n                return response.text();\n\n              case 6:\n                error = _context.sent;\n\n                _this.setError(error);\n\n                return _context.abrupt(\"return\");\n\n              case 9:\n                _context.next = 11;\n                return response.json();\n\n              case 11:\n                evals = _context.sent;\n\n                // check if there is at least one evaluation for course \n                if (evals.length > 0) {\n                  // for each evaluation create array containg all eval information to display\n                  evalsMap = evals.map(function (data, key) {\n                    var oneEval = {};\n                    oneEval.id = data.id;\n                    oneEval.studentID = data.studentID;\n                    oneEval.courseID = data.courseID;\n                    oneEval.instructors = data.instructors;\n                    oneEval.year = data.year;\n                    oneEval.quarter = data.quarter;\n                    oneEval.creditType = data.creditType;\n                    oneEval.credits = data.credits;\n                    oneEval.workload = data.workload;\n                    oneEval.gradingTechniques = data.gradingTechniques;\n                    oneEval.description = data.description;\n                    return oneEval;\n                  }); // add evaluations to page \n\n                  if (evalsMap.length >= 1) {\n                    _this.setState({\n                      evals: [].concat(_toConsumableArray(_this.state.evals), _toConsumableArray(evalsMap)),\n                      show: true\n                    });\n\n                    _this.setError(\"\");\n                  }\n                } else {\n                  _this.setState({\n                    evals: [],\n                    show: false\n                  });\n                }\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.state = {\n      evals: [],\n      show: false\n    };\n    return _this;\n  }\n\n  _createClass(CardList, [{\n    key: \"nextPath\",\n    value: function nextPath(path) {\n      this.props.history.push(path);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.props.classInfo.length != 0) {\n        return React.createElement(\"div\", {\n          class: \"card text-center\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          class: \"card-header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33\n          },\n          __self: this\n        }, this.props.classInfo[1]), React.createElement(\"div\", {\n          class: \"card-body\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36\n          },\n          __self: this\n        }, React.createElement(\"h5\", {\n          class: \"card-title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37\n          },\n          __self: this\n        }, this.props.classInfo[2]), React.createElement(\"p\", {\n          class: \"card-text\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38\n          },\n          __self: this\n        }, this.props.classInfo[3]), React.createElement(\"a\", {\n          href: \"#\",\n          class: \"btn btn-primary\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39\n          },\n          __self: this\n        }, React.createElement(Link, {\n          to: {\n            pathname: '/Profile',\n            state: {\n              courseID: this.props.classInfo[0]\n            }\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40\n          },\n          __self: this\n        }, \"Add Evaluation\")), React.createElement(\"a\", {\n          href: \"#\",\n          class: \"btn btn-primary\",\n          onClick: this.handleEvalClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        }, \"Read Evaluations\")), React.createElement(\"div\", {\n          class: \"eval-body\",\n          id: \"hi\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        }, this.state.show && this.state.evals.map(function (data, index) {\n          return React.createElement(Card, {\n            classInfo: data,\n            value: index,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 52\n            },\n            __self: this\n          });\n        })));\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        });\n      }\n    } // on click of button 'Read Evaluations' call getEvals() passing course ID from classInfo\n\n  }]);\n\n  return CardList;\n}(Component); // class CardList extends Component {\n//   render() {\n//     return <Card id={this.props.classInfo[0]} course={this.props.classInfo[1]} name={this.props.classInfo[2]} d={this.props.classInfo[3]}/>;\n//   }\n// }\n\n\nexport default CardList;","map":{"version":3,"sources":["/Users/paola/go/src/Info441FinalProject/clients/src/Components/Evaluations/CardList.js"],"names":["React","Component","api","Card","Profile","Button","withRouter","Link","CardList","props","setError","error","setState","handleEvalClick","evals","getEvals","classInfo","courseID","fetch","base","handlers","courses","method","response","status","text","json","length","evalsMap","map","data","key","oneEval","id","studentID","instructors","year","quarter","creditType","credits","workload","gradingTechniques","description","state","show","path","history","push","pathname","index"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"../../Styles/App.css\";\nimport api from '../../Constants/APIEndpoints/APIEndpoints';\nimport Card from './Card';\nimport Profile from '../Profile';\nimport Button from '@material-ui/core/Button';\nimport {withRouter} from 'react-router-dom';\nimport { Link } from 'react-router-dom'\n\n\nclass CardList extends Component {\n  setError = (error) => {\n    this.setState({ error })\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      evals: [],\n      show: false\n    };\n  }\n\n  nextPath(path) {\n    this.props.history.push(path); \n  }\n\n  render() {\n    if (this.props.classInfo.length != 0) {\n      return (\n        <div class=\"card text-center\">\n          <div class=\"card-header\">\n            {this.props.classInfo[1]}\n          </div>\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">{this.props.classInfo[2]}</h5>\n            <p class=\"card-text\">{this.props.classInfo[3]}</p>\n            <a href=\"#\" class=\"btn btn-primary\">\n            <Link to={{\n                  pathname: '/Profile',\n                  state: {\n                    courseID: this.props.classInfo[0]\n                  }}}>Add Evaluation</Link>\n  \n            </a>\n            <a href=\"#\" class=\"btn btn-primary\" onClick={this.handleEvalClick}>Read Evaluations</a>\n          </div>\n          <div class=\"eval-body\" id=\"hi\">\n            {this.state.show && this.state.evals.map((data, index) => {\n              return (\n                <Card classInfo={data} value={index}/>\n              );\n            })}\n          </div>\n        </div>\n      );\n    } else {\n      return (\n        <div></div>\n      );\n    }\n  }\n\n  // on click of button 'Read Evaluations' call getEvals() passing course ID from classInfo\n  handleEvalClick = () => {\n    this.setState({\n      evals: []\n    }, () => {\n      this.getEvals(this.props.classInfo[0])\n    })\n  }\n\n  // call 'GET /v1/courses/:courseID/evaluations` to get evaluations for specific course \n  getEvals = async (courseID) => {\n    const response = await fetch(api.base + api.handlers.courses + \"/\" + courseID + \"/evaluations\", { method: \"GET\" });\n    if (response.status >= 300) {\n      const error = await response.text();\n      this.setError(error);\n      return;\n    }\n\n    const evals = await response.json();\n\n    // check if there is at least one evaluation for course \n    if (evals.length > 0) {\n\n      // for each evaluation create array containg all eval information to display\n      let evalsMap = evals.map((data, key) => {\n        var oneEval = {};\n        oneEval.id = data.id;\n        oneEval.studentID = data.studentID;\n        oneEval.courseID = data.courseID;\n        oneEval.instructors = data.instructors;\n        oneEval.year = data.year;\n        oneEval.quarter = data.quarter;\n        oneEval.creditType = data.creditType;\n        oneEval.credits = data.credits;\n        oneEval.workload = data.workload;\n        oneEval.gradingTechniques = data.gradingTechniques;\n        oneEval.description = data.description;\n\n        return oneEval;\n      });\n\n      // add evaluations to page \n      if (evalsMap.length >= 1) {\n        this.setState({\n          evals: [ ...this.state.evals,...evalsMap ],\n          show: true\n        })\n        this.setError(\"\");\n      }\n    } else {\n      this.setState({\n        evals: [],\n        show: false\n      })\n    }\n  }\n}\n// class CardList extends Component {\n//   render() {\n//     return <Card id={this.props.classInfo[0]} course={this.props.classInfo[1]} name={this.props.classInfo[2]} d={this.props.classInfo[3]}/>;\n//   }\n// }\n\nexport default CardList;"]},"metadata":{},"sourceType":"module"}